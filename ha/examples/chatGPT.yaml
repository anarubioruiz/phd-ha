# non-functional example: error in action-default
default_config:

virtual:

switch:
  - platform: virtual
    name: '!occupancy_button'
    initial_value: 'off'

binary_sensor:
  - platform: virtual
    name: "!oc1"
    class: occupancy

light:
  - platform: virtual
    name: "!light1"

cover:
  - platform: virtual
    name: "!cover1"

group:
  office23:
    name: chatGPT
    entities:
      - light.light1
      - cover.cover1
      - binary_sensor.oc1

automation:
  - trigger:
    - platform: state
      entity_id: switch.occupancy_button
      to: 'on'
    - platform: state
      entity_id: switch.occupancy_button
      to: 'off'
    action:
    - service: virtual.turn_{{ trigger.to_state.state }}
      target:
        entity_id: binary_sensor.oc1

  # ChatGPT generated:

  - alias: "Energy Saving Automation"
    description: "This automation controls light and cover based on occupancy and daylight"
    trigger:
      - platform: state
        entity_id: binary_sensor.oc1
        from: "off"
        to: "on"
      - platform: state
        entity_id: binary_sensor.oc1
        from: "on"
        to: "off"
        for:
          minutes: 5
      - platform: sun
        event: sunrise
      - platform: sun
        event: sunset

    action:
      - choose:
          # if occupancy is detected, open cover, turn on light if it's dark outside
          - conditions:
              - condition: state
                entity_id: binary_sensor.oc1
                state: "on"
            sequence:
              - condition: state
                entity_id: sun.sun
                state: "below_horizon"
              - service: light.turn_on
                entity_id: light.light1
              - service: cover.open_cover
                entity_id: cover.cover1
          # if no occupancy is detected for 5 minutes, close cover and turn off light
          - conditions:
              - condition: state
                entity_id: binary_sensor.oc1
                state: "off"
            sequence:
              - service: light.turn_off
                entity_id: light.light1
              - service: cover.close_cover
                entity_id: cover.cover1
        default:
          # At sunrise, if no occupancy, make sure light is off and cover is closed
          - conditions:
              - condition: state
                entity_id: binary_sensor.oc1
                state: "off"
              - condition: state
                entity_id: sun.sun
                state: "above_horizon"
            sequence:
              - service: light.turn_off
                entity_id: light.light1
              - service: cover.close_cover
                entity_id: cover.cover1
          # At sunset, if there is occupancy, turn on light
          - conditions:
              - condition: state
                entity_id: binary_sensor.oc1
                state: "on"
              - condition: state
                entity_id: sun.sun
                state: "below_horizon"
            sequence:
              - service: light.turn_on
                entity_id: light.light1
